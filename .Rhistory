a <- matrix(data=c(1,1,1,1,-1),nrow=1,ncol=5,byrow=TRUE)
a <- as.vector(c(1,1,1,1,-1))
W*a
a*W
W*a - a*W
W <- matrix(data=c(0,-1,1,-1,-1,-1,0,-1,1,1,1,-1,0,-1,-1,-1,1,-1,0,1,-1,1,-1,1,0), nrow=5, ncol=5, byrow=TRUE)
W
a <- matrix(data=c(1,1,1,1,-1),nrow=1)
a
a <- matrix(data=c(1,1,1,1,-1),nrow=5)
a
W*a
W %*% a
W <- matrix(data=c(0,-1,1,-1,-1,-1,0,-1,1,1,1,-1,0,-1,-1,-1,1,-1,0,1,-1,1,-1,1,0), nrow=5, ncol=5, byrow=TRUE)
a <- matrix(data=c(1,1,1,1,-1),nrow=5)
W %*% a
b <- matrix(data=c(1,-1,1,-1,-1),nrow=5)
W %*% b
c <- matrix(data=c(-1,1,-1,1,-1),nrow=5)
W %*% c
w1 <- as.matrix(data=c(1,-1,1,-1,1,1),nrow=1,byrow=TRUE)
w1 <- matrix(data=c(1,-1,1,-1,1,1),nrow=1,byrow=TRUE)
w1
w1 <- matrix(data=c(1,-1,1,-1,1,1),nrow=6,byrow=TRUE)
w1 %*% transpose(w1)
transpose(w1)
matrix.transpose(w1)
w1 <- matrix(data=c(1,-1,1,-1,1,1),nrow=6,byrow=TRUE)
w1 %*% t(w1)
W1 <- diag(w1 %*% t(w1),0)
w1 %*% t(w1)
diag(w1 %*% t(w1),0)
w1 <- matrix(data=c(1,-1,1,-1,1,1),nrow=6,byrow=TRUE)
w1 %*% t(w1)
w2 <- matrix(data=c(1,1,1,-1,-1,-1),nrow=6,byrow=TRUE)
w2 %*% t(w2)
v1 <- matrix(data=c(1,-1,1,-1,1,1),nrow=6,byrow=TRUE)
w1 <_ v1 %*% t(v1)
v1 <- matrix(data=c(1,-1,1,-1,1,1),nrow=6,byrow=TRUE)
w1 <- v1 %*% t(v1)
v2 <- matrix(data=c(1,1,1,-1,-1,-1),nrow=6,byrow=TRUE)
w2 <- v2 %*% t(v2)
diag(w1) <- 0
w1
diag(w2) <- 0
w <- (w1+w2)/6
w
w %*% v1
w %*% v2
3.51
3.5/1。5
10.377+26.496
5.74637-0.55049*（15*0.19219—7.46909）
5.74637-0.55049*(15*0.19219—7.46909)
5.74637-0.55049*(15*0.19219-7.46909)
15*0.55049+8.271049
5.74637-0.55049*(15*0.19219+7.46909)
15*0.55049+0.04773055
clear
0.04/log(1.04)
0.04/log(1.04) * (0.23041-1.04^(-30)*8054.0544/9954.4306*0.60097)
(0.23041-1.04^(-30)*8054.0544/9954.4306*0.60097)
0.04/log(1.04) * (0.23041-1.04^(-30)*8054.0544/9854.4306*0.60097)
p=9287.1264/9706.0977
v=1.04^(-10)
a=0.32868-p*v*0.45650-p*v
a
p*v
p*v*0.4564
p*v*0.4564*5000
(0.32868-p*v*0.4564)*5000
A50*=0.32868
A_50=0.32868
A_50*=0.32868
A50s=0.32868
A50s=0.32868
l60=9287.2164
l50s=9706.0977
A60=0.4564
A50s-1.04^(-10)*A60*l60/l50s
(A50s-1.04^(-10)*A60*l60/l50s)*5000
v = 1/1.06
a_90 = 1 + v*72/100 + v^2 * 39/100
a_90
a_91 = 1 + v*39/72
a_91
d = 0.06/1.06
A_90 = 1 - d*a_90
A_90
A_91 = 1 - d*a_91
A_91
V_90 = A_91 - A_90*a_91/a_90
V_90
1000*V_90
1-a_91/a_90
plot(x, x^4-x^2+5)
x <- c(-100,100,1=0.1)
x <- c(-100,100,0.1)
plot(x, x^4-x^2+5)
x <- seq(-100,100,0.1)
plot(x, x^4-x^2+5)
plot(x, exp(abs(-x+2)))
cube = 2*(10*17+10*18.5+17*18.5)
cube
semi_sphere = 2*pi*2.75^2
semi_sphere
cone = pi*6*13.7
bases = pi*(2.72^2) + pi*(6^2)
total = cube + semi_sphere + cone - bases
total
bases = pi*(2.75^2) + pi*(6^2)
total = cube + semi_sphere + cone - bases
total
# load library MASS
library(MASS)
# set seed and create data vectors
set.seed(98989)
sample_size <- 100
sample_meanvector <- c(0, 0)
sample_covariance_matrix <- matrix(c(1, 0.4, 0.4, 0.25),
ncol = 2)
# create bivariate normal distribution
sample_distribution <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix)
# print top of distribution
head(sample_distribution)
dim(sample_distribution)
for (p in sample_distribution) {
print(p)
}
clear
# create bivariate normal distribution
sample_distribution <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix) %*% v
v <- c(3, -1)
# create bivariate normal distribution
sample_distribution <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix) %*% v
sample_distribution
dim(sample_distribution)
dim(filter(sample_distribution>2))
dim(filter(sample_distribution$1>2))
sample_distribution>3
m <- xv > 2
# create bivariate normal distribution
xv <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix) %*% v
m <- xv > 2
m
m <- xv > 2
count = 0
for (p in m) {
if (p) {
count += 1
}
}
print(count/sample_size)
m <- xv > 2
count = 0
for (p in m) {
if (p) {
count = count + 1
}
}
print(count/sample_size)
# load library MASS
library(MASS)
# set seed and create data vectors
set.seed(98989)
sample_size <- 1000
sample_meanvector <- c(0, 0)
sample_covariance_matrix <- matrix(c(1, 0.4, 0.4, 0.25),
ncol = 2)
v <- c(3, -1)
# create bivariate normal distribution
xv <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix) %*% v
m <- xv > 2
count = 0
for (p in m) {
if (p) {
count = count + 1
}
}
print(count/sample_size)
# load library MASS
library(MASS)
# set seed and create data vectors
set.seed(98989)
sample_size <- 10000
sample_meanvector <- c(0, 0)
sample_covariance_matrix <- matrix(c(1, 0.4, 0.4, 0.25),
ncol = 2)
v <- c(3, -1)
# create bivariate normal distribution
xv <- mvrnorm(n = sample_size,
mu = sample_meanvector,
Sigma = sample_covariance_matrix) %*% v
m <- xv > 2
count = 0
for (p in m) {
if (p) {
count = count + 1
}
}
print(count/sample_size)
setwd("~/Desktop/unsw/2023/actl3141/3141asm")
setwd("~/Desktop/unsw/2023/actl3141/3141asm")
# Assignment: Mortality and Longevity of Companion Dogs
#           ACTL3141/ACTL5104, T1 2023
library(dplyr)
library(ggplot2)
library(moments)
library("readxl")
library(survival)
library("KMsurv")
library("km.ci")
df <- read_excel("the_dataset.xlsx")
summary(df)
# 1. Descriptive analysis of the profile of dogs in the data
ggplot(df, aes(x=lifespan)) +
geom_histogram(aes(y=..density..), colour="black", fill="white", binwidth=0.5) +
geom_density(alpha=0.2, fill="lightblue") +
geom_vline(aes(xintercept=mean(lifespan)), color="blue", linetype="dashed", size=0.5) +
ggtitle("Histogram for Lifespan of UK Companion Dogs") +
xlab("Lifespan in Years") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
plot_density_by <- function(df, category, cat) {
p <- ggplot(df, aes(x = lifespan, color = category, fill = category)) +
geom_density(alpha = 0.5) +
scale_color_manual(values = c("blue", "red", "orange")) +
scale_fill_manual(values = c("blue", "red", "orange")) +
ggtitle(paste("Densities of Lifespan of UK Companion Dogs by", cat)) +
xlab("Lifespan in Years") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
return (p)
}
plot_density_by(df, df$sex, "Sex")
plot_density_by(df, df$neuter, "Neutering Status")
plot_density_by(na.omit(df), na.omit(df)$pure_cross, "Breed")
plot_density_by(df, df$insured, "Insurance Status")
lifespan_by <- rbind(summary(filter(df, sex=="Male")$lifespan),
summary(filter(df, sex=="Female")$lifespan),
summary(filter(df, neuter=="Neutered")$lifespan),
summary(filter(df, neuter=="Entire")$lifespan),
summary(filter(df, pure_cross=="Crossbred")$lifespan),
summary(filter(df, pure_cross=="Purebred")$lifespan),
summary(filter(df, insured=="Uninsured")$lifespan),
summary(filter(df, insured=="Insured")$lifespan))
rownames(lifespan_by) <- c("Male", "Female", "Neutered", "Entire", "Crossbred", "Purebred", "Uninsured", "Insured")
lifespan_by
#skewness(filter(df, sex=="Male")$lifespan)
#kurtosis(filter(df, sex=="Male")$lifespan)
wilcox.test(filter(df, sex=="Male")$lifespan, filter(df, sex=="Female")$lifespan)
wilcox.test(filter(df, neuter=="Neutered")$lifespan, filter(df, neuter=="Entire")$lifespan)
wilcox.test(filter(df, pure_cross=="Crossbred")$lifespan, filter(df, pure_cross=="Purebred")$lifespan)
wilcox.test(filter(df, insured=="Uninsured")$lifespan, filter(df, insured=="Insured")$lifespan)
# 2. Survival Analysis
lifespan_by
summary(filter(df, sex=="Male")$lifespan)
lifespan_by <- rbind(summary(df)$lifespan,
summary(filter(df, sex=="Male")$lifespan),
summary(filter(df, sex=="Female")$lifespan),
summary(filter(df, neuter=="Neutered")$lifespan),
summary(filter(df, neuter=="Entire")$lifespan),
summary(filter(df, pure_cross=="Crossbred")$lifespan),
summary(filter(df, pure_cross=="Purebred")$lifespan),
summary(filter(df, insured=="Uninsured")$lifespan),
summary(filter(df, insured=="Insured")$lifespan))
lifespan_by <- rbind(summary(df$lifespan),
summary(filter(df, sex=="Male")$lifespan),
summary(filter(df, sex=="Female")$lifespan),
summary(filter(df, neuter=="Neutered")$lifespan),
summary(filter(df, neuter=="Entire")$lifespan),
summary(filter(df, pure_cross=="Crossbred")$lifespan),
summary(filter(df, pure_cross=="Purebred")$lifespan),
summary(filter(df, insured=="Uninsured")$lifespan),
summary(filter(df, insured=="Insured")$lifespan))
rownames(lifespan_by) <- c("Male", "Female", "Neutered", "Entire", "Crossbred", "Purebred", "Uninsured", "Insured")
rownames(lifespan_by) <- c("Whole Population", "Male", "Female", "Neutered", "Entire", "Crossbred", "Purebred", "Uninsured", "Insured")
lifespan_by
lifespan_by
dim(df$lifespan)
df$lifespan
length(df$lifespan)
length(df$lifespan)+summary(df$lifespan)
c(length(df$lifespan), summary(df$lifespan))
c(length(df$lifespan), summary(df$lifespan))
lifespan_by <- rbind(c(length(df$lifespan), summary(df$lifespan)),
c(length(filter(df, sex=="Male")$lifespan), summary(filter(df, sex=="Male")$lifespan)),
c(length(filter(df, sex=="Male")$lifespan), summary(filter(df, sex=="Male")$lifespan)),
c(length(filter(df, sex=="Male")$lifespan), summary(filter(df, sex=="Male")$lifespan)),
c(length(filter(df, sex=="Male")$lifespan), summary(filter(df, sex=="Male")$lifespan)),
c(length(filter(df, sex=="Male")$lifespan), summary(filter(df, sex=="Male")$lifespan)),
summary(filter(df, sex=="Female")$lifespan),
summary(filter(df, neuter=="Neutered")$lifespan),
summary(filter(df, neuter=="Entire")$lifespan),
summary(filter(df, pure_cross=="Crossbred")$lifespan),
summary(filter(df, pure_cross=="Purebred")$lifespan),
summary(filter(df, insured=="Uninsured")$lifespan),
summary(filter(df, insured=="Insured")$lifespan))
rownames(lifespan_by) <- c("Whole Population", "Male", "Female", "Neutered", "Entire", "Crossbred", "Purebred", "Uninsured", "Insured")
c(length(filter(df, sex=="Male")$lifespan), summary(filter(df, sex=="Male")$lifespan)),lifespan_by
lifespan_by <- rbind(summary(df$lifespan),
summary(filter(df, sex=="Male")$lifespan),
summary(filter(df, sex=="Female")$lifespan),
summary(filter(df, neuter=="Neutered")$lifespan),
summary(filter(df, neuter=="Entire")$lifespan),
summary(filter(df, pure_cross=="Crossbred")$lifespan),
summary(filter(df, pure_cross=="Purebred")$lifespan),
summary(filter(df, insured=="Uninsured")$lifespan),
summary(filter(df, insured=="Insured")$lifespan))
rownames(lifespan_by) <- c("Male", "Female", "Neutered", "Entire", "Crossbred", "Purebred", "Uninsured", "Insured")
lifespan_by
rownames(lifespan_by) <- c("Population", "Male", "Female", "Neutered", "Entire", "Crossbred", "Purebred", "Uninsured", "Insured")
lifespan_by
lifespan_by <- rbind(summary(df$lifespan),
summary(filter(df, sex=="Male")$lifespan),
summary(filter(df, sex=="Female")$lifespan),
summary(filter(df, neuter=="Neutered")$lifespan),
summary(filter(df, neuter=="Entire")$lifespan),
summary(filter(df, pure_cross=="Crossbred")$lifespan),
summary(filter(df, pure_cross=="Purebred")$lifespan),
summary(filter(df, insured=="Uninsured")$lifespan),
summary(filter(df, insured=="Insured")$lifespan))
rownames(lifespan_by) <- c("Population", "Male", "Female", "Neutered", "Entire", "Crossbred", "Purebred", "Uninsured", "Insured")
lifespan_by
df %>% count(sex)
df %>% count(sex) %>% count(neuter)
df
dim(df)
df %>% count(sex)
df %>% count(neuter)
dim(df)
df %>% count(sex)
df %>% count(neuter)
df %>% count(pure_cross)
df %>% count(insured)
df$insured
df %>% count(insured)
colnames(df)
dim(df)
df %>% count(sex)
df %>% count(neuter)
df %>% count(pure_cross)
df %>% count(insured)
lifespan_by <- rbind(summary(df$lifespan),
summary(filter(df, sex=="Male")$lifespan),
summary(filter(df, sex=="Female")$lifespan),
summary(filter(df, neuter=="Neutered")$lifespan),
summary(filter(df, neuter=="Entire")$lifespan),
summary(filter(df, pure_cross=="Crossbred")$lifespan),
summary(filter(df, pure_cross=="Purebred")$lifespan),
summary(filter(df, insured=="Uninsured")$lifespan),
summary(filter(df, insured=="Insured")$lifespan))
rownames(lifespan_by) <- c("Population", "Male", "Female", "Neutered", "Entire", "Crossbred", "Purebred", "Uninsured", "Insured")
lifespan_by
lifespan_by
colnames(df)
t.test(df$lifespan, conf.level=0.95)
t.test(df$lifespan, conf.level=0.95)
t.test(filter(df, sex=="Male")$lifespan, conf.level=0.95)
t.test(filter(df, sex=="Female")$lifespan, conf.level=0.95)
t.test(filter(df, neuter=="Neutered")$lifespan, conf.level=0.95)
t.test(filter(df, neuter=="Entire")$lifespan, conf.level=0.95)
t.test(filter(df, pure_cross=="Crossbred")$lifespan, conf.level=0.95)
t.test(filter(df, pure_cross=="Purebred")$lifespan, conf.level=0.95)
t.test(filter(df, insured=="Uninsured")$lifespan, conf.level=0.95)
t.test(filter(df, insured=="Insured")$lifespan, conf.level=0.95)
IQR(df$lifespan)
IQR(filter(df, sex=="Male")$lifespan)
IQR(filter(df, sex=="Female")$lifespan)
IQR(filter(df, neuter=="Neutered")$lifespan)
IQR(filter(df, neuter=="Entire")$lifespan)
IQR(filter(df, pure_cross=="Crossbred")$lifespan)
IQR(filter(df, pure_cross=="Purebred")$lifespan)
IQR(filter(df, insured=="Uninsured")$lifespan)
IQR(filter(df, insured=="Insured")$lifespan)
surv.obj <- Surv(lifespan)
df
surv.obj <- Surv(df$time)
surv.obj <- Surv(df$lifespan)
surv.obj
surv.obj <- Surv(df$lifespan)
surv.fit <- survfit(surv.obj~1)
surv.fit
plot(surv.fit, main="KM estimate with 95% confidence bounds", xlab="Lifespan", ylab="survival function")
# 1. Descriptive analysis of the profile of dogs in the data
ggplot(df, aes(x=lifespan)) +
geom_histogram(aes(y=..density..), colour="black", fill="white", binwidth=0.5) +
geom_density(alpha=0.2, fill="lightblue") +
geom_vline(aes(xintercept=mean(lifespan)), color="blue", linetype="dashed", size=0.5) +
ggtitle("Histogram for Lifespan of UK Companion Dogs") +
xlab("Lifespan in Years") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
skewness(df$lifespan)
surv.obj <- Surv(df$lifespan)
surv.fit <- survfit(surv.obj~1)
plot(surv.fit, main="KM estimate with 95% confidence bounds",
xlab="Lifespan (in years)", ylab="Survival function")
colnames(df)
glm(lifespan ~ sex + pure_cross + insured + neuter)
glm(lifespan ~ sex + pure_cross + insured + neuter, data = df, family=Gamma)
m <- glm(lifespan ~ sex + pure_cross + insured + neuter, data = df, family=Gamma)
summary(m)
# 1. Descriptive analysis of the profile of dogs in the data
lifespan_glm <- glm(formula = lifespan ~ sex + pure_cross + insured + neuter,
family = Gamma, data = df)
colnames(df)
# 1. Descriptive analysis of the profile of dogs in the data
lifespan_glm <- glm(formula = lifespan ~ sex + neuter + breed_vc + pure_cross + breed_group + insured,
family = Gamma, data = df)
summary(lifespan_glm)
# 1. Descriptive analysis of the profile of dogs in the data
trainIndex <- createDataPartition(data$target, p = 0.7, list = FALSE)
library(caret)
# 1. Descriptive analysis of the profile of dogs in the data
set.seed(123)
trainIndex <- sample(seq_len(nrow(df)), size = 0.7 * nrow(df))
trainIndex
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
lifespan_glm <- glm(formula = lifespan ~ sex + neuter + breed_vc + pure_cross + breed_group + insured,
family = Gamma, data = train)
dim(train)
nrows(train)/nrows(df)
nrow(train)/nrow(df)
predictions <- predict(model, newdata = test, type = "response")
predictions <- predict(lifespan_glm, newdata = test, type = "response")
predictions <- predict(lifespan_glm, newdata = test, type = "response")
lifespan_glm <- glm(#formula = lifespan ~ sex + neuter + breed_vc + pure_cross + breed_group + insured,
formula = lifespan ~ sex + neuter + pure_cross + insured,
family = Gamma, data = train)
predictions <- predict(lifespan_glm, newdata = test, type = "response")
library(pROC)
auc <- roc(test$target, predictions)$auc
auc <- roc(test$lifespan, predictions)$auc
# Assignment: Mortality and Longevity of Companion Dogs
#           ACTL3141/ACTL5104, T1 2023
library(dplyr)
library(ggplot2)
library(moments)
library(readxl)
library(survival)
library(KMsurv)
library(km.ci)
df <- read_excel("the_dataset.xlsx")
summary(df)
# 1. Descriptive analysis of the profile of dogs in the data
set.seed(123)
trainIndex <- sample(seq_len(nrow(df)), size = 0.7 * nrow(df))
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
lifespan_glm <- glm(#formula = lifespan ~ sex + neuter + breed_vc + pure_cross + breed_group + insured,
formula = lifespan ~ sex + neuter + pure_cross + insured,
family = Gamma, data = train)
predictions <- predict(lifespan_glm, newdata = test, type = "response")
predictions
dim(predictions)
nrow(predictions)
length(predictions)
length(test$lifespan)
predictions <- predict(lifespan_glm, newdata = test)
predictions
length(predictions)
library(Metrics)
install.packages("Metrics")
library(Metrics)
RMSE(predictions, test$lifespan)
library(Metrics)
RMSE(predictions, test$lifespan)
rmse <- sqrt(mean(test$lifespan - predictions)^2)
rmse
test$lifespan
test$lifespan - predictions
predictions
lifespan_glm <- glm(#formula = lifespan ~ sex + neuter + breed_vc + pure_cross + breed_group + insured,
formula = lifespan ~ sex + neuter + pure_cross + insured,
family = Gamma, data = train)
predictions <- predict(lifespan_glm, newdata = test)
rmse <- sqrt(mean(test$lifespan - predictions)^2)
rmse
library(Metrics)
rmse(test$lifespan, predictions)
test$lifespan
predictions
length(predictions)
length(na.omit(predictions))
length(na.omit(test$lifespan))
lifespan_glm <- glm(#formula = lifespan ~ sex + neuter + breed_vc + pure_cross + breed_group + insured,
formula = lifespan ~ sex + neuter + pure_cross + insured,
family = Gamma, data = train)
predictions <- predict(lifespan_glm, newdata = test)
length(test)
dim(test)
train %>% count(pure_cross)
df %>% count(sex)
library(dplyr)
library(ggplot2)
library(moments)
library(readxl)
library(survival)
library(KMsurv)
library(km.ci)
df %>% count(sex)
df %>% count(sex)
library(dplyr)
